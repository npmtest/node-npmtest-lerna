{"/home/travis/build/npmtest/node-npmtest-lerna/test.js":"/* istanbul instrument in package npmtest_lerna */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-lerna/lib.npmtest_lerna.js":"/* istanbul instrument in package npmtest_lerna */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_lerna = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_lerna = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-lerna/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-lerna && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_lerna */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_lerna\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_lerna.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_lerna.rollup.js'] =\n            local.assetsDict['/assets.npmtest_lerna.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_lerna.__dirname + '/lib.npmtest_lerna.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-lerna/node_modules/lerna/bin/lerna.js":"#!/usr/bin/env node\n\nvar args = process.argv.slice(2);\nif (args.length > 1) {\n  console.error(\"Too many arguments.\");\n  process.exit(1);\n}\n\nvar arg = args[0];\n\nif (arg === \"-v\" || arg === \"-V\" || arg === \"--version\" || arg === \"-version\") {\n  console.log(require(\"../package.json\").version);\n  process.exit(0);\n}\n\nvar commands = require(\"../lib/commands\");\nvar init     = require(\"../lib/init\");\n\nif (!arg || arg === \"--help\" || arg === \"-h\" || arg === \"-H\" || arg === \"-help\") {\n  console.log();\n  console.log(\"  lerna [command]\");\n  console.log();\n  console.log(\"  Commands:\");\n  console.log();\n\n  for (var key in commands) {\n    var desc = commands[key].description;\n    console.log(\"    \" + key + \" - \" + desc);\n  }\n\n  console.log();\n  process.exit(0);\n}\n\nif (!(arg in commands)) {\n  console.error(\"Unknown command \" + JSON.stringify(arg));\n  process.exit(1);\n}\n\nvar command = commands[arg];\ncommand.execute(init(arg, process.cwd()));\n","/home/travis/build/npmtest/node-npmtest-lerna/node_modules/lerna/lib/commands/index.js":"exports.bootstrap = require(\"./bootstrap\");\nexports.publish   = require(\"./publish\");\nexports.updated   = require(\"./updated\");\n","/home/travis/build/npmtest/node-npmtest-lerna/node_modules/lerna/lib/commands/bootstrap.js":"var progressBar = require(\"../progress-bar\");\nvar mkdirp      = require(\"mkdirp\");\nvar rimraf      = require(\"rimraf\");\nvar chalk       = require(\"chalk\");\nvar child       = require(\"child_process\");\nvar async       = require(\"async\");\nvar path        = require(\"path\");\nvar fs          = require(\"fs\");\n\nexports.description = \"Link together local packages and npm install remaining package dependencies\";\n\nexports.execute = function (config) {\n  // get packages\n  var packages = [];\n  fs.readdirSync(config.packagesLoc).forEach(function (loc) {\n    var name = path.basename(loc);\n    if (name[0] === \".\") return;\n\n    var pkgLoc = path.join(config.packagesLoc, name, \"package.json\");\n    if (!fs.existsSync(pkgLoc)) return;\n\n    var pkg = require(pkgLoc);\n    packages.push({\n      folder: name,\n      pkg: pkg,\n      name: pkg.name\n    });\n  });\n\n  var completed = false;\n\n  var tick = progressBar(packages.length);\n\n  async.parallelLimit(packages.map(function (root) {\n    return function (done) {\n      var tasks = [];\n      var nodeModulesLoc = path.join(config.packagesLoc, root.folder, \"node_modules\");\n\n      tasks.push(function (done) {\n        mkdirp(nodeModulesLoc, done);\n      });\n\n      tasks.push(function (done) {\n        async.each(packages, function (sub, done) {\n          var ver = false;\n          if (root.pkg.dependencies) ver = root.pkg.dependencies[sub.name];\n          if (root.pkg.devDependencies && !ver) ver = root.pkg.devDependencies[sub.name];\n          if (!ver) return done();\n\n          // ensure that this is referring to a local package\n          if (ver[0] !== \"^\" || ver[1] !== config.currentVersion[0]) return done();\n\n          var linkSrc = path.join(config.packagesLoc, sub.folder);\n          var linkDest = path.join(nodeModulesLoc, sub.name);\n\n          rimraf(linkDest, function (err) {\n            if (err) return done(err);\n\n            mkdirp(linkDest, function (err) {\n              if (err) return done(err);\n\n              fs.writeFile(path.join(linkDest, \"package.json\"), JSON.stringify({\n                name: sub.name,\n                version: require(path.join(linkSrc, \"package.json\")).version\n              }, null, \"  \"), function (err) {\n                if (err) return done(err);\n\n                fs.writeFile(path.join(linkDest, \"index.js\"), \"module.exports = require(\" + JSON.stringify(linkSrc) + \");\", done);\n              });\n            });\n          });\n        }, done);\n      });\n\n      tasks.push(function (done) {\n        child.exec(\"npm install\", {\n          cwd: path.join(config.packagesLoc, root.folder)\n        }, function (err, stdout, stderr) {\n          if (err != null) {\n            done(stderr);\n          } else {\n            done();\n          }\n        });\n      });\n\n      tasks.push(function (done) {\n        if (!completed) tick(root.name);\n        done();\n      });\n\n      async.series(tasks, done);\n    };\n  }), 4, function (err) {\n    // don't display the ticker if we hit an error and we still have workers\n    completed = true;\n\n    if (err) {\n      console.error(err);\n      console.log();\n      process.exit(1);\n    } else {\n      console.log(chalk.green(\"Successfully bootstrapped \" + packages.length + \" packages.\"));\n      console.log();\n      process.exit();\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-lerna/node_modules/lerna/lib/progress-bar.js":"var ProgressBar = require(\"progress\");\nvar pad         = require(\"pad\");\n\nmodule.exports = function (total) {\n  var bar = new ProgressBar(\":packagename ╢:bar╟\", {\n    total: total,\n    complete: \"█\",\n    incomplete: \"░\",\n    clear: true,\n\n    // terminal columns - package name length - additional characters length\n    width: (process.stdout.columns || 100) - 50 - 3\n  });\n\n  return function (name) {\n    bar.tick({\n      packagename: pad(name.slice(0, 50), 50)\n    });\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-lerna/node_modules/lerna/lib/commands/publish.js":"var progressBar = require(\"../progress-bar\");\nvar updated     = require(\"./updated\");\nvar readline    = require(\"readline-sync\");\nvar semver      = require(\"semver\");\nvar chalk       = require(\"chalk\");\nvar child       = require(\"child_process\");\nvar async       = require(\"async\");\nvar fs          = require(\"fs\");\n\nvar checkUpdatedPackages = updated.checkUpdatedPackages;\n\nexports.description = \"Publish updated packages to npm\";\n\nexports.execute = function (config) {\n  var changedPackages = [];\n  var changedFiles = [config.versionLoc];\n\n  var FORCE_VERSION = process.env.FORCE_VERSION;\n  FORCE_VERSION = FORCE_VERSION ? FORCE_VERSION.split(\",\") : [];\n\n  var NEW_VERSION = getVersion();\n  fs.writeFileSync(config.versionLoc, NEW_VERSION, \"utf8\");\n\n  //\n\n  try {\n    changedPackages = checkUpdatedPackages(config);\n    console.log(\"Packages to be updated\");\n    console.log(changedPackages.map(function(pkg) {\n      return \"- \" + pkg;\n    }).join(\"\\n\"));\n    updateChangedPackages();\n    updateTag();\n    publish();\n  } catch (err) {\n    onError(err);\n  }\n\n  //\n\n  var createdTag = false;\n\n  function updateTag() {\n    var NEW_TAG_NAME = \"v\" + NEW_VERSION;\n    execSync(\"git commit -m \" + NEW_TAG_NAME);\n    execSync(\"git tag \" + NEW_TAG_NAME);\n    createdTag = true;\n  }\n\n  function removeTag() {\n    if (createdTag) {\n      console.error(chalk.red(\"Attempting to roll back tag creation.\"));\n      execSync(\"git tag -d v\" + NEW_VERSION);\n    }\n  }\n\n  function getVersion() {\n    var input = readline.question(\"New version (Leave blank for patch version): \");\n\n    var ver = semver.valid(input);\n    if (!ver) {\n      ver = semver.inc(config.currentVersion, input || \"patch\");\n    }\n\n    if (ver) {\n      return ver;\n    } else {\n      console.log(\"Version provided is not valid semver.\");\n      return getVersion();\n    }\n  }\n\n  function execSync(cmd) {\n    return child.execSync(cmd, {\n      encoding: \"utf8\"\n    }).trim();\n  }\n\n  function getPackageLocation(name) {\n    return config.packagesLoc + \"/\" + name;\n  }\n\n  function updateDepsObject(deps) {\n    for (var depName in deps) {\n      // ensure this was generated and we're on the same major\n      if (deps[depName][0] !== \"^\" || deps[depName][1] !== NEW_VERSION[0]) continue;\n\n      if (changedPackages.indexOf(depName) >= 0) {\n        deps[depName] = \"^\" + NEW_VERSION;\n      }\n    }\n  }\n\n  function updateChangedPackages() {\n    changedPackages.forEach(function (name) {\n      var pkgLoc = getPackageLocation(name) + \"/package.json\";\n      var pkg = require(pkgLoc);\n\n      // set new version\n      pkg.version = NEW_VERSION;\n\n      // updated dependencies\n      updateDepsObject(pkg.dependencies);\n      updateDepsObject(pkg.devDependencies);\n\n      // write new package\n      fs.writeFileSync(pkgLoc, JSON.stringify(pkg, null, \"  \") + \"\\n\");\n\n      // push to be git committed\n      changedFiles.push(pkgLoc);\n    });\n\n    changedFiles.forEach(function (loc) {\n      execSync(\"git add \" + loc);\n    });\n  }\n\n  function publish() {\n    changedPackages.forEach(function (name) {\n      // prepublish script\n      var prePub = getPackageLocation(name) + \"/scripts/prepublish.js\";\n      if (fs.existsSync(prePub)) require(prePub);\n    });\n\n    console.log(\"Publishing tagged packages...\");\n    var tick = progressBar(changedPackages.length);\n\n    async.parallelLimit(changedPackages.map(function (name) {\n      var retries = 0;\n\n      return function run(done) {\n        var loc = getPackageLocation(name);\n\n        child.exec(\"cd \" + loc + \" && npm publish --tag prerelease\", function (err, stdout, stderr) {\n          if (err || stderr) {\n            err = stderr || err.stack;\n            if (err.indexOf(\"You cannot publish over the previously published version\") < 0) {\n              if (++retries < 5) {\n                console.log(chalk.yellow(\"Attempting to retry publishing \" + name + \"...\"));\n                return run(done);\n              } else {\n                console.log(chalk.red(\"Ran out of retries while publishing \" + name));\n                return done(err);\n              }\n            } else {\n              // publishing over an existing package which is likely due to a timeout or something\n              return done();\n            }\n          }\n\n          tick(name);\n\n          // postpublish script\n          var postPub = loc + \"/scripts/postpublish.js\";\n          if (fs.existsSync(postPub)) require(postPub);\n\n          done();\n        });\n      };\n    }), 4, function (err) {\n      onError(err);\n      ship();\n    });\n  }\n\n  function onError(err) {\n    if (!err) return;\n\n    console.log();\n    console.error(chalk.red(\"There was a problem publishing.\"));\n    removeTag();\n    console.error(err.stack || err);\n    process.exit(1);\n  }\n\n  function ship() {\n    console.log(\"Setting latest npm tags...\");\n    var tick = progressBar(changedPackages.length);\n\n    async.parallelLimit(changedPackages.map(function (name) {\n      return function (done) {\n        while (true) {\n          try {\n            execSync(\"npm dist-tag rm \" + name + \" prerelease\");\n            if (process.env.NPM_DIST_TAG) {\n              execSync(\"npm dist-tag add \" + name + \"@\" + NEW_VERSION + \" \" + process.env.NPM_DIST_TAG);\n            } else {\n              execSync(\"npm dist-tag add \" + name + \"@\" + NEW_VERSION + \" latest\");\n            }\n            tick(name);\n            break;\n          } catch (err) {\n            console.error(err.stack);\n          }\n        }\n        done();\n      };\n    }), 4, function (err) {\n      onError(err);\n      execSync(\"git push\");\n      execSync(\"git push --tags\");\n      console.log();\n      console.log(chalk.green(\"Successfully published \" + NEW_VERSION + \".\"));\n      process.exit();\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-lerna/node_modules/lerna/lib/commands/updated.js":"var progressBar = require(\"../progress-bar\");\nvar chalk       = require(\"chalk\");\nvar child       = require(\"child_process\");\nvar fs          = require(\"fs\");\n\nexports.description = \"Check which packages have changed since the last release\";\n\nexports.execute = function (config) {\n  var changedPackages = exports.checkUpdatedPackages(config).map(function(pkg) {\n    return \"- \" + pkg;\n  }).join(\"\\n\");\n\n  console.log(changedPackages);\n}\n\nexports.checkUpdatedPackages = function (config) {\n  var changedPackages = [];\n  var FORCE_VERSION = process.env.FORCE_VERSION;\n  FORCE_VERSION = FORCE_VERSION ? FORCE_VERSION.split(\",\") : [];\n\n  console.log(\"Checking packages...\");\n\n  var packageNames = fs.readdirSync(config.packagesLoc).filter(function (name) {\n    return name[0] !== \".\" && fs.statSync(config.packagesLoc + \"/\" + name).isDirectory();\n  });\n\n  var tick = progressBar(packageNames.length);\n\n  var hasTags = !!execSync(\"git tag\");\n  var lastTagCommit;\n  var lastTag;\n\n  if (hasTags) {\n    lastTagCommit = execSync(\"git rev-list --tags --max-count=1\");\n    lastTag = execSync(\"git describe --tags \" + lastTagCommit);\n  }\n\n  packageNames.forEach(function (name) {\n    var cfg = getPackageConfig(config, name);\n    tick(name);\n\n    if (cfg.private) return;\n\n    if (!hasTags) {\n      changedPackages.push(name);\n      return;\n    }\n\n    // check if package has changed since last release\n    var diff = FORCE_VERSION.indexOf(\"*\") >= 0 || FORCE_VERSION.indexOf(name) >= 0 ||\n               execSync(\"git diff \" + lastTag + \" -- \" + getPackageLocation(config, name));\n    if (diff) {\n      changedPackages.push(name);\n    }\n  });\n\n  if (!changedPackages.length && !FORCE_VERSION.length) {\n    console.error(chalk.red(\"No updated packages to publish.\"));\n    process.exit(1);\n  } else {\n    return changedPackages;\n  }\n}\n\nfunction getPackageLocation(config, name) {\n  return config.packagesLoc + \"/\" + name;\n}\n\nfunction getPackageConfig(config, name) {\n  return require(getPackageLocation(config, name) + \"/package.json\");\n}\n\nfunction execSync(cmd) {\n  return child.execSync(cmd, {\n    encoding: \"utf8\"\n  }).trim();\n}\n","/home/travis/build/npmtest/node-npmtest-lerna/node_modules/lerna/lib/init.js":"var chalk = require(\"chalk\");\nvar path  = require(\"path\");\nvar fs    = require(\"fs\");\n\nmodule.exports = function (cmd, cwd) {\n  var version = require(\"../package.json\").version;\n  console.log();\n  console.log(chalk.bold(\"Lerna \" + cmd +  \" v\" + version));\n  console.log();\n\n  var config = {};\n\n  config.packagesLoc = path.join(cwd, \"packages\");\n\n  if (!fs.existsSync(config.packagesLoc)) {\n    console.log(\"Creating packages folder.\");\n    fs.mkdirSync(config.packagesLoc);\n  }\n\n  config.packageLoc = path.join(cwd, \"package.json\");\n\n  if (!fs.existsSync(config.packageLoc)) {\n    console.log(\"Creating package.json\");\n    fs.writeFileSync(config.packageLoc, JSON.stringify({\n      private: true,\n      dependencies: {\n        lerna: \"^\" + version,\n      }\n    }, null, \"  \"));\n  }\n\n  config.versionLoc  = path.join(cwd, \"VERSION\");\n\n  if (fs.existsSync(config.versionLoc)) {\n    config.currentVersion = fs.readFileSync(config.versionLoc, \"utf8\").trim();\n  } else {\n    console.log(\"Creating VERSION file.\");\n    fs.writeFileSync(config.versionLoc, \"0.0.0\");\n    config.currentVersion = \"0.0.0\";\n  }\n\n  console.log(\"Current version: \" + config.currentVersion);\n  console.log(\"Version file location: \" + config.versionLoc);\n  console.log(\"Packages location: \" + config.packagesLoc);\n  console.log();\n\n  return config;\n};\n"}